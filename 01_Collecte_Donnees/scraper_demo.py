"""
Script de D√©monstration - Scraping UVBF

‚ö†Ô∏è ATTENTION : Ce script est fourni √† TITRE DE D√âMONSTRATION uniquement.

En raison des restrictions d'acc√®s aux API des plateformes sociales :
- Twitter/X : N√©cessite un compte d√©veloppeur payant ($100+/mois)
- Facebook : Processus d'approbation complexe et restrictions strictes
- Instagram : API limit√©e, acc√®s restreint
- TikTok : Pas d'API publique accessible

Les donn√©es r√©elles ont √©t√© COLLECT√âES MANUELLEMENT en respectant :
‚úÖ Les conditions d'utilisation des plateformes
‚úÖ La vie priv√©e des utilisateurs (anonymisation)
‚úÖ Les r√®gles √©thiques de la recherche acad√©mique

Ce script permet de :
1. G√©n√©rer des donn√©es fictives pour tester le pipeline
2. Montrer comment le code fonctionnerait avec un acc√®s API complet
3. Servir de r√©f√©rence pour une future int√©gration API
"""

import json
import os
from datetime import datetime, timedelta
import random
from pathlib import Path


class GenerateurDonneesDemo:
    """G√©n√©rateur de donn√©es de d√©monstration pour tester le pipeline"""
    
    def __init__(self, chemin_sortie='uvbf_data.json'):
        """
        Initialise le g√©n√©rateur
        
        Args:
            chemin_sortie: Chemin o√π sauvegarder les donn√©es g√©n√©r√©es
        """
        self.chemin_sortie = chemin_sortie
        self.donnees = []
        
        # Templates de publications (inspir√©s de vraies publications)
        self.templates = {
            'positif': [
                "Excellent programme de formation √† l'UVBF ! Je recommande vivement.",
                "Les cours en ligne de l'UVBF sont de tr√®s bonne qualit√©.",
                "Merci √† l'UVBF pour cette opportunit√© d'apprentissage accessible.",
                "Fier d'√©tudier √† l'UVBF, une institution innovante.",
                "La plateforme d'e-learning de l'UVBF est tr√®s bien con√ßue.",
                "Je viens de terminer ma formation √† l'UVBF et je suis tr√®s satisfait !",
                "L'UVBF offre une excellente flexibilit√© pour les √©tudiants travailleurs.",
                "Bravo √† l'√©quipe de l'UVBF pour la qualit√© des enseignements.",
                "Super exp√©rience d'apprentissage √† l'UVBF, les professeurs sont comp√©tents.",
            ],
            'negatif': [
                "Probl√®mes de connexion r√©currents sur la plateforme UVBF...",
                "Les frais d'inscription √† l'UVBF sont trop √©lev√©s.",
                "D√©√ßu par le manque de support technique √† l'UVBF.",
                "La qualit√© de certains cours √† l'UVBF laisse √† d√©sirer.",
                "Trop de bugs sur le site de l'UVBF, c'est frustrant.",
                "Les d√©lais de correction des devoirs √† l'UVBF sont trop longs.",
                "Manque de communication entre l'administration et les √©tudiants √† l'UVBF.",
                "Difficile de joindre le service client de l'UVBF.",
            ],
            'neutre': [
                "Inscription ouverte √† l'UVBF pour la rentr√©e prochaine.",
                "L'UVBF propose des formations en ligne dans plusieurs domaines.",
                "Comment s'inscrire √† l'UVBF ? Quelqu'un peut m'aider ?",
                "R√©union d'information √† l'UVBF ce samedi.",
                "L'UVBF c'est l'Universit√© Virtuelle du Burkina Faso.",
                "Quelqu'un √©tudie √† l'UVBF ici ? J'aimerais avoir des retours.",
                "L'UVBF organise une journ√©e portes ouvertes ce mois-ci.",
                "Quelles sont les fili√®res disponibles √† l'UVBF ?",
            ]
        }
        
        self.auteurs = [
            'Ou√©draogo', 'Traor√©', 'Kabor√©', 'Sawadogo', 'Compaor√©', 
            'Niki√®ma', 'Zongo', 'Ilboudo', 'Barry', 'Sana',
            'Ouattara', 'Diallo', 'Kon√©', 'Tapsoba', 'Bila'
        ]
        
        self.prenoms = [
            'Aminata', 'Ibrahim', 'Fatou', 'Moussa', 'A√Øcha', 
            'Seydou', 'Salimata', 'Abdoul', 'Mariam', 'Hamidou',
            'Fanta', 'Boureima', 'Rasmata', 'Souleymane', 'Awa'
        ]
        
        self.plateformes = ['Twitter', 'Facebook', 'Instagram', 'TikTok']
        self.hashtags = ['#UVBF', '#Universit√©Virtuelle', '#BurkinaFaso', '#Formation']
    
    def generer_donnees(self, nombre=300):
        """
        G√©n√®re des donn√©es de d√©monstration
        
        Args:
            nombre: Nombre de publications √† g√©n√©rer
        """
        print("="*70)
        print("G√âN√âRATION DE DONN√âES DE D√âMONSTRATION")
        print("="*70)
        print("\n‚ö†Ô∏è  Ces donn√©es sont FICTIVES et g√©n√©r√©es automatiquement")
        print("‚ö†Ô∏è  Les vraies donn√©es ont √©t√© collect√©es MANUELLEMENT\n")
        
        date_debut = datetime.now() - timedelta(days=270)  # 9 mois
        
        for i in range(nombre):
            # Choisir un type de sentiment al√©atoire
            sentiment_type = random.choice(['positif', 'negatif', 'neutre'])
            texte = random.choice(self.templates[sentiment_type])
            
            # Choisir une plateforme avec distribution r√©aliste
            plateforme = random.choices(
                self.plateformes,
                weights=[40, 40, 15, 5],  # Twitter, FB, Insta, TikTok
                k=1
            )[0]
            
            publication = {
                'id': f"DEMO_{i:04d}",
                'auteur': f"{random.choice(self.prenoms)} {random.choice(self.auteurs)}",
                'plateforme': plateforme,
                'texte': texte,
                'date_publication': (date_debut + timedelta(days=random.randint(0, 270))).strftime('%Y-%m-%d %H:%M:%S'),
                'hashtags': random.sample(self.hashtags, k=random.randint(1, 3)),
                'likes': random.randint(5, 200),
                'retweets_partages': random.randint(0, 100),
                'commentaires': random.randint(0, 50)
            }
            
            self.donnees.append(publication)
        
        print(f"‚úì {len(self.donnees)} publications g√©n√©r√©es")
    
    def sauvegarder(self):
        """Sauvegarde les donn√©es g√©n√©r√©es"""
        with open(self.chemin_sortie, 'w', encoding='utf-8') as f:
            json.dump(self.donnees, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ Donn√©es sauvegard√©es dans : {self.chemin_sortie}")
    
    def afficher_statistiques(self):
        """Affiche les statistiques des donn√©es g√©n√©r√©es"""
        import pandas as pd
        
        df = pd.DataFrame(self.donnees)
        
        print("\n" + "="*70)
        print("STATISTIQUES DES DONN√âES G√âN√âR√âES")
        print("="*70)
        
        print(f"\nNombre total : {len(df)}")
        print(f"\nR√©partition par plateforme :")
        print(df['plateforme'].value_counts())
        
        print(f"\nMoyennes d'engagement :")
        print(f"  Likes : {df['likes'].mean():.1f}")
        print(f"  Partages : {df['retweets_partages'].mean():.1f}")
        print(f"  Commentaires : {df['commentaires'].mean():.1f}")
        
        print("="*70)


def main():
    """Fonction principale"""
    print("\n" + "="*70)
    print("SCRIPT DE D√âMONSTRATION - G√âN√âRATION DE DONN√âES UVBF")
    print("="*70)
    print("\nüìå IMPORTANT :")
    print("  - Ces donn√©es sont FICTIVES")
    print("  - Pour le projet r√©el, les donn√©es ont √©t√© collect√©es MANUELLEMENT")
    print("  - Les API des r√©seaux sociaux sont devenues inaccessibles/payantes")
    print("="*70 + "\n")
    
    # Cr√©er le g√©n√©rateur
    generateur = GenerateurDonneesDemo()
    
    # G√©n√©rer les donn√©es
    generateur.generer_donnees(nombre=300)
    
    # Afficher les statistiques
    generateur.afficher_statistiques()
    
    # Sauvegarder
    generateur.sauvegarder()
    
    print("\n‚úÖ G√©n√©ration termin√©e !")
    print("\nüìå Prochaines √©tapes :")
    print("  1. Annoter les sentiments : cd ../02_Annotation && python annotation_manuelle.py")
    print("  2. Pr√©traiter les donn√©es : cd ../03_Pretraitement && python pretraitement.py")
    print("="*70 + "\n")


if __name__ == "__main__":
    main()

